<?php

function work_timesheet_menu() {
  $items['timesheet'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet',
    'access callback' => TRUE,
  );
  
  $items['timesheet/developer'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_developer',
    'access callback' => TRUE,
  );
  
  $items['timesheet/client'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_client',
    'access callback' => TRUE,
  );

  return $items;
}

function work_timesheet_client() {

  $result = db_query("SELECT nid FROM {node} WHERE type = 'client' ORDER BY title");

  $output = '';


  foreach ($result as $r) {
    $client = node_load($r->nid);

    $times = get_time_by_client($client->nid);
      

    if (count($times) > 0) {
    
      $output .= "<h2>{$client->title}</h2>";

      $headers = array('Project', 'Task', 'Developer', 'Date', 'Hours', 'Paid', 'Billed', 'Profit');

      $rows = array();
      
      $hours = 0;
      $paid = 0;
      $billed = 0;
      $profit = 0;

      foreach ($times as $t) {

        $task = get_task_by_time($t->item_id);
        
        $project = node_load($task->field_project['und'][0]['nid']);
        
        $client = node_load($project->field_client['und'][0]['nid']);
        
        $user = user_load($t->field_user['und'][0]['uid']);

        $task_hours = $t->field_hours['und'][0]['value'];
        $task_paid = $task_hours * $user->field_rate['und'][0]['value'];

        if (isset($project->field_bill_rate['und'][0]['value'])) {
          $task_billed = '$' . ($task_hours * $project->field_bill_rate['und'][0]['value']);
          $task_profit = '$' . (($task_hours * $project->field_bill_rate['und'][0]['value'])  - $task_paid);

          $billed += $task_hours * $project->field_bill_rate['und'][0]['value'];
          $profit += ($task_hours * $project->field_bill_rate['und'][0]['value']) - $task_paid;
        
        } else {
          if (isset($project->field_retainer['und'][0]['value'])) {
            $task_billed = 'retainer';
            $task_profit = 'retainer';
          }
          
          if (isset($project->field_flat_fee['und'][0]['value'])) {
            $task_billed = 'flat fee';
            $task_profit = 'flat fee';
          }
        }


        $rows[] = array(  l($project->title, 'node/' . $project->nid),
                          l($task->title, 'node/' . $task->nid),
                          $user->name,
                          date('M d (D)', strtotime($t->field_date['und'][0]['value'])),
                          $task_hours,
                          '$' . $task_paid, 
                          $task_billed,
                          $task_profit);

        $hours += $task_hours;
        $paid  += $task_paid;
      }
        
      $rows[] = array(
                  array(  'data' => '<strong>Totals</strong>', 
                          'colspan' => 4), 
                  '<strong>' . $hours  . '</strong>', 
                  '<strong>$' .$paid . '</strong>', 
                  '<strong>$' .$billed . '</strong>', 
                  '<strong>$' . $profit . '</strong>');

      $output .= theme('table', array('header'=> $headers, 'rows' => $rows));
    }
  }

  return $output;
}

function work_timesheet_developer() {
  $result = db_query("SELECT uid FROM {users} WHERE uid IN (SELECT uid FROM {users_roles WHERE rid = 5 OR rid = 3}) ORDER BY name");

  $output = '';

  foreach ($result as $r) {
    $user = user_load($r->uid);

    $times = get_time_by_user($user->uid);

    if (count($times) > 0) {
      $output .= "<h2>{$user->name}</h2>";

      $headers = array('Client', 'Project', 'Task', 'Date', 'Hours', 'Paid', 'Billed', 'Profit');

      $rows = array();
      
      $hours = 0;
      $paid = 0;
      $billed = 0;
      $profit = 0;

      foreach ($times as $t) {

        $task = get_task_by_time($t->item_id);
        
        $project = node_load($task->field_project['und'][0]['nid']);
        
        $client = node_load($project->field_client['und'][0]['nid']);

        $task_hours = $t->field_hours['und'][0]['value'];
        $task_paid = $task_hours * $user->field_rate['und'][0]['value'];

        if (isset($project->field_bill_rate['und'][0]['value'])) {
          $task_billed = '$' . ($task_hours * $project->field_bill_rate['und'][0]['value']);
          $task_profit = '$' . (($task_hours * $project->field_bill_rate['und'][0]['value'])  - $task_paid);

          $billed += $task_hours * $project->field_bill_rate['und'][0]['value'];
          $profit += ($task_hours * $project->field_bill_rate['und'][0]['value']) - $task_paid;
        
        } else {
          if (isset($project->field_retainer['und'][0]['value'])) {
            $task_billed = 'retainer';
            $task_profit = 'retainer';
          }
          
          if (isset($project->field_flat_fee['und'][0]['value'])) {
            $task_billed = 'flat fee';
            $task_profit = 'flat fee';
          }
        }

        $rows[] = array(  l($client->title, 'node/' . $client->nid),
                          l($project->title, 'node/' . $project->nid),
                          l($task->title, 'node/' . $task->nid),
                          date('M d (D)', strtotime($t->field_date['und'][0]['value'])),
                          $task_hours,
                          '$' . $task_paid, 
                          $task_billed,
                          $task_profit);

        $hours += $task_hours;
        $paid  += $task_paid;
      }
        
      $rows[] = array(
                  array(  'data' => '<strong>Totals</strong>', 
                          'colspan' => 4), 
                  '<strong>' . $hours  . '</strong>', 
                  '<strong>$' .$paid . '</strong>', 
                  '<strong>$' .$billed . '</strong>', 
                  '<strong>$' . $profit . '</strong>');

      $output .= theme('table', array('header'=> $headers, 'rows' => $rows));
    }
  }

  return $output;
}

function get_task_by_time($id) {
  $nid = db_query("SELECT entity_id FROM {field_data_field_time} WHERE field_time_value = :ftv", array(':ftv' => $id))->fetchField();

  $node = node_load($nid);

  return $node;
}

function get_time_by_user($uid) {
  $result = db_query("SELECT entity_id FROM {field_data_field_user} WHERE bundle = 'field_time' AND field_user_uid = :uid", array(':uid' => $uid));

  $times = array();

  foreach($result as $r) {
    $entity = entity_load('field_collection_item', array($r->entity_id));
    $times[] = array_pop($entity);
  }

  return $times;
} 

function get_time_by_client($nid) {
  $result = db_query("SELECT entity_id FROM {field_data_field_client} WHERE field_client_nid = :nid", array(':nid' => $nid));

  $times = array(); 

  foreach($result as $r) {
    $project = node_load($r->entity_id);

    $result_tasks = db_query("SELECT entity_id FROM {field_data_field_project} WHERE field_project_nid = :nid", array(':nid' => $project->nid));

    foreach ($result_tasks as $rt) {
      $task = node_load($rt->entity_id);

      if (isset($task->field_time['und'])) {
        foreach ($task->field_time['und'] as $t) {
          $entity = entity_load('field_collection_item', array($t['value']));
          $times[] = array_pop($entity);
        }
      }
    }
  }

  return $times;
} 

function work_timesheet_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['timesheet'] = array(
    'template' => 'timesheet',
    'path' => drupal_get_path('module', 'work_timesheet'),
    'variables' => array('table' => null),
   );

  return $theme;
}

function work_timesheet() {
  global $user;
  $params = drupal_get_query_parameters();
  $table = array();
  if((isset($params["start_date"]) && isset($params["end_date"])) && ($params["start_date"] != '') && $params["end_date"] != '') {
    $start_date = date('Y-m-d 00:00:00',strtotime($params["start_date"]));
    $end_date = date('Y-m-d 23:59:59',strtotime($params["end_date"]));
  } else {
    $start_date = date("Y-m-01 00:00:00");
    $end_date = date("Y-m-t 23:59:59");
  }
  if(!isset($params["group_by"])) {
    $group_by = "any";
  } else {
    $group_by = $params["group_by"];
  }
  $data = work_timesheet_query_database($start_date, $end_date);
  $header = build_headers($group_by);
  $sorted_data = sort_data($data, $group_by);
  $table = build_rows($sorted_data, $header, $group_by);
  return theme('timesheet', array('table' => $table));
}

function work_timesheet_query_database($start_date, $end_date) {
  global $user;

  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->addField('n', 'title');
  $query->addField('ft', 'field_time_value');
  $query->addField('u', "'field_user_uid'");
  $query->addField('d', 'field_date_value');
  $query->addField('h', 'field_hours_value');
  $query->addField('fd', 'field_description_value');
  $query->join('field_data_field_time', 'ft', 'n.nid = ft.entity_id');
  $query->leftJoin('field_data_field_user', 'u', 'u.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_date', 'd', 'd.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_hours', 'h', 'h.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_description', 'fd', 'fd.entity_id = ft.field_time_value');
  $query->condition('n.type', 'task');
  $query->condition('d.field_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->condition('h.field_hours_value', '0', '>');
  $query->addField('np', 'title', 'project');
  $query->addField('tp', 'field_project_nid', 'project_nid');
  $query->addField('br', 'field_bill_rate_value', 'bill_rate');
  $query->addField('pr', 'field_pay_rate_value', 'pay_rate');
  $query->join('field_data_field_project', 'tp', 'tp.entity_id = n.nid');
  $query->join('node', 'np', 'tp.field_project_nid = np.nid');
  $query->leftJoin('field_data_field_bill_rate', 'br', 'br.entity_id = np.nid');
  $query->leftJoin('field_data_field_pay_rate', 'pr', 'pr.entity_id = np.nid');
  $query->join('field_data_field_client', 'fc', 'fc.entity_id = np.nid');
  $query->join('node', 'nc', 'nc.nid = fc.field_client_nid');
  $query->addField('nc', 'title', 'client');
  $query->condition('n.status', '1', '=');
  if(in_array('Developer', $user->roles)) {
    $query->condition('u.field_user_uid', $user->uid, '=');
  } elseif(in_array('Client', $user->roles)) {
    $query->join('field_data_field_admins', 'fa', 'fa.entity_id = nc.nid');
    $query->condition('fa.field_admins_uid', $user->uid, '=');
  }

  $results = $query->execute();
  return $results;
}

function build_rows_admin($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_billed = 0;
  $total_paid = 0;
  $total_difference = 0;

  if(isset($results)) {
    foreach ($results as $r) {  
      $nid = $r->nid;
      $project = $r->project;
      $project_nid = $r->project_nid;
      $hours = $r->field_hours_value;
      $billed = $r->bill_rate;
      $paid = $r->pay_rate;
      $title = $r->title;
      $billed_hours = ($hours * $billed);
      $paid_hours = ($hours * $paid);
      $difference = ($billed_hours - $paid_hours);
      $developer = user_load($r->field_user_uid);
      $client = $r->client;
      if ($group_by == 'client') {
        $rows[] = array(l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
      } elseif ($group_by == 'developer') {
        $rows[] = array($r->client, l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
      } elseif ($group_by == 'project') {
        $rows[] = array($r->client, $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
      } else { 
        $rows[] = array($r->client, l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
      }
      $total_hours += $hours;
      $total_billed += $billed_hours;
      $total_paid += $paid_hours;
      $total_difference += $difference;
    }
  }

  $rows[] = array('Bookweb', l('Bookweb Ongoing Maintenance', 'node/188'), null, null, null, null, '3000', null, null);
      
  $total_billed += 3000;
  $total_difference += 3000;

  if ($group_by == 'any') {
    $rows[] = make_strong(array("Totals:" ,null, null, null, null, $total_hours, $total_billed, $total_paid, $total_difference));
  } else {
    $rows[] = make_strong(array("Totals:" ,null, null, null, $total_hours, $total_billed, $total_paid, $total_difference));
  }

  return $rows;
}

function build_rows_client($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_billed = 0;
  if(isset($results)) {
    foreach ($results as $r) { 
      $nid = $r->nid;
      $project_nid = $r->project_nid;
      $project = $r->project;
      $title = $r->title;
      $hours = $r->field_hours_value;
      $billed = $r->bill_rate;
      $billed_hours = ($hours * $billed);
      $developer = user_load($r->field_user_uid);
      if ($group_by == 'developer') {
        $rows[] = array(l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
      } elseif ($group_by == 'project') {
        $rows[] = array($developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
      } else { $rows[] = array(l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
      }
      $total_hours += $hours;
      $total_billed += $billed_hours;
    }
  }
  if ($group_by == 'any' || $group_by == 'client') {
    $rows[] = make_strong(array("Totals:" ,null, null, null, $total_hours, $total_billed));
  } else {
    $rows[] = make_strong(array("Totals:" ,null, null, $total_hours, $total_billed));
  }
  return $rows;
}

function build_rows_dev($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_paid = 0;
  if(isset($results)) {
    foreach ($results as $r) { 
      $nid = $r->nid;
      $project_nid = $r->project_nid;
      $project = $r->project;
      $hours = $r->field_hours_value;
      $title = $r->title;
      $paid = $r->pay_rate;
      $paid_hours = ($hours * $paid);
      $developer = user_load($r->field_user_uid);
      $billed = $r->bill_rate;
      $billed_hours = ($hours * $billed);
      if ($group_by == 'project') {
        $rows[] = array(l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
      } else { $rows[] = array(l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
      }
      $total_hours += $hours;
      $total_paid += $paid_hours;
    }
  }
  if($group_by == 'project') {
    $rows[] = make_strong(array("Totals: ", null, $total_hours, $total_paid));
  } else {
    $rows[] = make_strong(array("Totals: ", null, null, $total_hours, $total_paid));
  }
  return $rows;
}

function build_headers($group_by){
  global $user;

  if ($group_by == 'any') {
    if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Project', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'client') {
    if (in_array('administrator', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'developer') {
      if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Project', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'project') {
      if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Task', 'Date', 'Hours', 'Amount Due');
    }
  }
  return $header;
}

function sort_data($data, $group_by) {
  $sorted_data = null;
  if ($group_by == 'any') {
    $sorted_data = $data;
  } elseif ($group_by == 'client') {
    foreach ($data as $d) {
        $sorted_data[$d->client][] = $d;
      }
  } elseif ($group_by == 'developer') {
    foreach ($data as $d) {
        $sorted_data[$d->field_user_uid][] = $d;
      }
  } elseif ($group_by == 'project') {
    foreach ($data as $d) {
        $sorted_data[$d->project][] = $d;
      }
  }
return $sorted_data;
}

function build_rows($sorted_data, $header, $group_by) {
  global $user;
  
  if ($group_by == 'any' || $sorted_data == null) {
    if (in_array('administrator', $user->roles)) {
    $rows = build_rows_admin($sorted_data, $group_by);
  } elseif (in_array('Developer', $user->roles)) {
    $rows = build_rows_dev($sorted_data, $group_by);
  } elseif (in_array('Client', $user->roles)) {
    $rows = build_rows_client($sorted_data, $group_by);
  }
    $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
  } elseif ($group_by == 'developer') {
    foreach ($sorted_data as $developer => $dev_table) {
      $dev = user_load($developer);
      $table[] = "<h1> $dev->name </h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($dev_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($dev_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($dev_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    }
  } elseif ($group_by == 'client') {
    foreach ($sorted_data as $client => $client_table) {
      $table[] = "<h1> $client </h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($client_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($client_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($client_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    }
  } elseif ($group_by == 'project') {
    foreach ($sorted_data as $project=>$project_table) {
      $project_nid = $project_table[0]->nid;
      $project = $project_table[0]->project;
      $link = l($project, 'node/' . $project_nid);
      $table[] = "<h1>$link</h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($project_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($project_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($project_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    } 
  } 
  return $table;
}

function make_strong($string) {
  foreach($string as &$s) {
    $s = "<strong>$s</strong>";
  }

  return $string;
}
