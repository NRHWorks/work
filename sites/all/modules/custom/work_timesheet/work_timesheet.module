<?php

function work_timesheet_menu() {
  $items['timesheet'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet',
    'access callback' => TRUE,
  );

  return $items;
}

function work_timesheet_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['timesheet'] = array(
    'template' => 'timesheet',
    'path' => drupal_get_path('module', 'work_timesheet'),
    'variables' => array('table' => null),
   );

  return $theme;
}

function work_timesheet() {
  global $user;
  $group_by = null;
  $params = drupal_get_query_parameters();
  if(!isset($params["start_date"]) && !isset($params["end_date"])) {
    $start_date = date("Y-m-00 00:00:00");
    $end_date = date("Y-m-t 23:59:59");
  } else {
    $start_date = date('Y-m-d 00:00:00',strtotime($params["start_date"]));
    $end_date = date('Y-m-d 23:59:59',strtotime($params["end_date"]));
  }
  //var_dump($params);
  //print_r($start_date); print_r($end_date); exit;
  //$header = array('Task', 'Bill Rate', 'Pay Rate', 'Hours', 'Total Billed', 'Total Payed', 'Difference');
  if (in_array('administrator', $user->roles)) {
    $header = array('Client', 'Project', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    $user_type = 'admin';
  } elseif (in_array('Developer', $user->roles)) {
    $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    $user_type = 'dev';
  } elseif (in_array('Client', $user->roles)) {
    $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    $user_type = 'client';
  }
  $data = work_timesheet_query_database($start_date, $end_date, $group_by, $user_type);
  $rows = build_rows($data, $user_type);
  $table = theme('table', array('header'=> $header, 'rows' => $rows));
  return theme('timesheet', array('table' => $table));
}

function work_timesheet_query_database($start_date, $end_date, $group_by) {
  global $user;
  //print '<pre>'; print_r($user); exit;
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->addField('n', 'title');
  $query->addField('ft', 'field_time_value');
  $query->addField('u', "'field_user_uid'");
  $query->addField('d', 'field_date_value');
  $query->addField('h', 'field_hours_value');
  $query->addField('fd', 'field_description_value');
  $query->join('field_data_field_time', 'ft', 'n.nid = ft.entity_id');
  $query->leftJoin('field_data_field_user', 'u', 'u.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_date', 'd', 'd.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_hours', 'h', 'h.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_description', 'fd', 'fd.entity_id = ft.field_time_value');
  $query->condition('n.type', 'task');
  $query->condition('d.field_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->addField('np', 'title', 'project');
  $query->addField('tp', 'field_project_nid', 'project_nid');
  $query->addField('br', 'field_bill_rate_value', 'bill_rate');
  $query->addField('pr', 'field_pay_rate_value', 'pay_rate');
  $query->join('field_data_field_project', 'tp', 'tp.entity_id = n.nid');
  $query->join('node', 'np', 'tp.field_project_nid = np.nid');
  $query->leftJoin('field_data_field_bill_rate', 'br', 'br.entity_id = np.nid');
  $query->leftJoin('field_data_field_pay_rate', 'pr', 'pr.entity_id = np.nid');
  $results = $query->execute();
  return $results;
}

function build_rows($results, $user_type) {

  $rows = array();

  switch ($user_type) {
    case 'admin':
      $total_hours = 0;
      $total_billed = 0;
      $total_paid = 0;
      $total_difference = 0;
      foreach ($results as $r) { 
        //print '<pre>'; print_r($r); exit;
        $hours = $r->field_hours_value;
        $billed = $r->bill_rate;
        $paid = $r->pay_rate;
        $billed_hours = ($hours * $billed);
        $paid_hours = ($hours * $paid);
        $difference = ($billed_hours - $paid_hours);
        $developer = null;
        $client = null;
        $rows[] = array($r->client, $r->project, $r->dev, $r->title, $r->field_date_value, $hours, $billed_hours, $paid_hours, $difference);
        $total_hours += $hours;
        $total_billed += $billed_hours;
        $total_paid += $paid_hours;
        $total_difference += $difference;
      }
      $rows[] = array('', '', '', '', '', $total_hours, $total_billed, $total_paid, $total_difference);
      break;

      case 'client':
        $total_hours = 0;
        $total_billed = 0;
        foreach ($results as $r) { 
          $hours = $r->field_hours_value;
          $billed = $r->bill_rate;
          $billed_hours = ($hours * $billed);
          $developer = null;
          $rows[] = array($r->project, $r->dev, $r->title, $r->field_date_value, $hours, $billed_hours);
          $total_hours += $hours;
          $total_billed += $billed_hours;
        }
        $rows[] = array('', '', '', '', $total_hours, $total_billed);
        break;

      case 'dev':
        $total_hours = 0;
        $total_paid = 0;
        foreach ($results as $r) { 
          $hours = $r->field_hours_value;
          $paid = $r->pay_rate;
          $paid_hours = ($hours * $paid);
          $rows[] = array($r->project, $r->title, $r->field_date_value, $hours, $paid_hours);
          $total_hours += $hours;
          $total_paid += $paid_hours;
      }
      $rows[] = array('', '', '', '', $total_hours, $total_paid);
      break;
  }
  return $rows;
}