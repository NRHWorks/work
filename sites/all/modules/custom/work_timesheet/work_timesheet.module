<?php

function work_timesheet_menu() {
  $items['timesheet'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet',
    'access callback' => TRUE,
  );

  return $items;
}

function work_timesheet_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['timesheet'] = array(
    'template' => 'timesheet',
    'path' => drupal_get_path('module', 'work_timesheet'),
    'variables' => array('table' => null),
   );

  return $theme;
}

function work_timesheet() {
  global $user;
  $params = drupal_get_query_parameters();
  $table = array();
  if(!isset($params["start_date"]) && !isset($params["end_date"])) {
    $start_date = date("Y-m-00 00:00:00");
    $end_date = date("Y-m-t 23:59:59");
  } else {
    $start_date = date('Y-m-d 00:00:00',strtotime($params["start_date"]));
    $end_date = date('Y-m-d 23:59:59',strtotime($params["end_date"]));
  }
  if(!isset($params["group_by"])) {
    $group_by = "any";
  } else {
    $group_by = $params["group_by"];
  }
  $data = work_timesheet_query_database($start_date, $end_date);
  $header = build_headers($group_by);
  $sorted_data = sort_data($data, $group_by);
  $table= build_rows($sorted_data, $header, $group_by);
  return theme('timesheet', array('table' => $table));
}

function work_timesheet_query_database($start_date, $end_date) {
  global $user;

  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->addField('n', 'title');
  $query->addField('ft', 'field_time_value');
  $query->addField('u', "'field_user_uid'");
  $query->addField('d', 'field_date_value');
  $query->addField('h', 'field_hours_value');
  $query->addField('fd', 'field_description_value');
  $query->join('field_data_field_time', 'ft', 'n.nid = ft.entity_id');
  $query->leftJoin('field_data_field_user', 'u', 'u.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_date', 'd', 'd.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_hours', 'h', 'h.entity_id = ft.field_time_value');
  $query->leftJoin('field_data_field_description', 'fd', 'fd.entity_id = ft.field_time_value');
  $query->condition('n.type', 'task');
  $query->condition('d.field_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->addField('np', 'title', 'project');
  $query->addField('tp', 'field_project_nid', 'project_nid');
  $query->addField('br', 'field_bill_rate_value', 'bill_rate');
  $query->addField('pr', 'field_pay_rate_value', 'pay_rate');
  $query->join('field_data_field_project', 'tp', 'tp.entity_id = n.nid');
  $query->join('node', 'np', 'tp.field_project_nid = np.nid');
  $query->leftJoin('field_data_field_bill_rate', 'br', 'br.entity_id = np.nid');
  $query->leftJoin('field_data_field_pay_rate', 'pr', 'pr.entity_id = np.nid');
  $query->join('field_data_field_client', 'fc', 'fc.entity_id = np.nid');
  $query->join('node', 'nc', 'nc.nid = fc.field_client_nid');
  $query->addField('nc', 'title', 'client');
  $query->condition('n.status', '1', '=');
  if(in_array('Developer', $user->roles)) {
    $query->condition('u.field_user_uid', $user->uid, '=');
  } elseif(in_array('Client', $user->roles)) {
    $query->join('field_data_field_admins', 'fa', 'fa.entity_id = nc.nid');
    $query->condition('fa.field_admins_uid', $user->uid, '=');
  }

  $results = $query->execute();
  return $results;
}

function build_rows_admin($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_billed = 0;
  $total_paid = 0;
  $total_difference = 0;
  foreach ($results as $r) {  
    //print '<pre>'; print_r($r); exit; 
    $nid = $r->nid;
    $project = $r->project;
    $project_nid = $r->project_nid;
    $hours = $r->field_hours_value;
    $billed = $r->bill_rate;
    $paid = $r->pay_rate;
    $title = $r->title;
    $billed_hours = ($hours * $billed);
    $paid_hours = ($hours * $paid);
    $difference = ($billed_hours - $paid_hours);
    $developer = user_load($r->field_user_uid);
    $client = $r->client;
    if ($group_by == 'client') {
      $rows[] = array(l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
    } elseif ($group_by == 'developer') {
      $rows[] = array($r->client, l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
    } elseif ($group_by == 'project') {
      $rows[] = array($r->client, $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
    } else { $rows[] = array($r->client, l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours, $paid_hours, $difference);
    }
    $total_hours += $hours;
    $total_billed += $billed_hours;
    $total_paid += $paid_hours;
    $total_difference += $difference;
  }
  $totals = make_strong(array("Total Hours: $total_hours", "Total Billed: $total_billed", "Total Paid: $total_paid", "Total Profit: $total_difference"));
  foreach($totals as $t) {
    $rows[] = array($t);
  }
  return $rows;
}

function build_rows_client($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_billed = 0;
  foreach ($results as $r) { 
    $nid = $r->nid;
    $project_nid = $r->project_nid;
    $project = $r->project;
    $title = $r->title;
    $hours = $r->field_hours_value;
    $billed = $r->bill_rate;
    $billed_hours = ($hours * $billed);
    $developer = user_load($r->field_user_uid);
    if ($group_by == 'developer') {
      $rows[] = array(l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
    } elseif ($group_by == 'project') {
      $rows[] = array($developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
    } else { $rows[] = array(l($project, 'node/' . $project_nid), $developer->name, l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
    }
    $total_hours += $hours;
    $total_billed += $billed_hours;
  }
  $totals = make_strong(array("Total Hours: $total_hours", "Total Billed: $total_billed"));
  foreach($totals as $t) {
    $rows[] = array($t);
  }
  return $rows;
}

function build_rows_dev($results, $group_by) {
  $rows = array();
  $total_hours = 0;
  $total_paid = 0;
  foreach ($results as $r) { 
    $nid = $r->nid;
    $project_nid = $r->project_nid;
    $project = $r->project;
    $hours = $r->field_hours_value;
    $title = $r->title;
    $paid = $r->pay_rate;
    $paid_hours = ($hours * $paid);
    $developer = user_load($r->field_user_uid);
    $billed = $r->bill_rate;
    $billed_hours = ($hours * $billed);
    if ($group_by == 'project') {
      $rows[] = array(l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
    } else { $rows[] = array(l($project, 'node/' . $project_nid), l($title, 'node/' . $nid), date('F j, Y', strtotime($r->field_date_value)), $hours, $billed_hours);
    }
    $total_hours += $hours;
    $total_paid += $paid_hours;
  }
  $totals = make_strong(array("Total Hours: $total_hours", "Total Paid: $total_paid"));
  foreach($totals as $t) {
    $rows[] = array($t);
  }
  return $rows;
}

function build_headers($group_by){
  global $user;

  if ($group_by == 'any') {
    if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Project', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'client') {
    if (in_array('administrator', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'developer') {
      if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Project', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Project', 'Task', 'Date', 'Hours', 'Amount Due');
    }
  } elseif ($group_by == 'project') {
      if (in_array('administrator', $user->roles)) {
      $header = array('Client', 'Developer', 'Task', 'Date', 'Hours', 'Billed', 'Paid', 'Profit');
    } elseif (in_array('Client', $user->roles)) {
      $header = array('Developer', 'Task', 'Date', 'Hours', 'Amount Due');
    } elseif (in_array('Developer', $user->roles)) {
      $header = array('Task', 'Date', 'Hours', 'Amount Due');
    }
  }
  return $header;
}

function sort_data($data, $group_by) {
  if ($group_by == 'any'){
    $sorted_data = $data;
  } elseif ($group_by == 'client') {
    foreach ($data as $d) {
        $sorted_data[$d->client][] = $d;
      }
  } elseif ($group_by == 'developer') {
    foreach ($data as $d) {
        $sorted_data[$d->field_user_uid][] = $d;
      }
  } elseif ($group_by == 'project') {
    foreach ($data as $d) {
        $sorted_data[$d->project][] = $d;
      }
  }
return $sorted_data;
}

function build_rows($sorted_data, $header, $group_by) {
  global $user;

  if ($group_by == 'developer') {
    foreach ($sorted_data as $developer => $dev_table) {
      $dev = user_load($developer);
      $table[] = "<h1> $dev->name </h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($dev_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($dev_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($dev_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    }
  } elseif ($group_by == 'client') {
    foreach ($sorted_data as $client => $client_table) {
      $table[] = "<h1> $client </h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($client_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($client_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($client_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    }
  } elseif ($group_by == 'project') {
    foreach ($sorted_data as $project=>$project_table) {
      $project_nid = $project_table[0]->nid;
      $project = $project_table[0]->project;
      $link = l($project, 'node/' . $project_nid);
      $table[] = "<h1>$link</h1>";
      if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($project_table, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($project_table, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($project_table, $group_by);
      } 
      $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
    } 
  } else {
     if (in_array('administrator', $user->roles)) {
        $rows = build_rows_admin($sorted_data, $group_by);
      } elseif (in_array('Developer', $user->roles)) {
        $rows = build_rows_dev($sorted_data, $group_by);
      } elseif (in_array('Client', $user->roles)) {
        $rows = build_rows_client($sorted_data, $group_by);
      }
    $table[] = theme('table', array('header'=> $header, 'rows' => $rows));
  }
  return $table;
}

function make_strong($string) {
  foreach($string as &$s) {
    $s = "<Strong>$s</Strong>";
  }

  return $string;
}