<?php

function work_timesheet_menu() {
  /*
  $items['timesheet'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_updated',
    'access callback' => TRUE,
  );
  
  $items['timesheet/developer'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_developer',
    'access callback' => TRUE,
  );
  
  $items['timesheet/client'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_client',
    'access callback' => TRUE,
  );

  $items['timesheet/project'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_project',
    'access callback' => TRUE,
  );
  
  */

  $items['timesheet/admin'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_page',
    'page arguments' => array('admin'),
    'access callback' => TRUE,
  );

  $items['timesheet/client'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_page',
    'page arguments' => array('client'),
    'access callback' => TRUE,
  );

  $items['timesheet/developer'] = array(
    'title' => 'Timesheet',
    'page callback' => 'work_timesheet_page',
    'page arguments' => array('developer'),
    'access callback' => TRUE,
  );

  return $items;
}


function work_timesheet_theme($existing, $type, $theme, $path) {
  $theme = array();
  
  $theme['timesheet_filter'] = array(
    'template' => 'timesheet-filter',
    'variables' => array('version' => null),
    'path' => drupal_get_path('module', 'work_timesheet'),
   );

  return $theme;
}

function work_timesheet_page($version = 'admin') {
  $output = theme('timesheet_filter', array('version' => $version));
  
  $output .= '[summary]';
 
  extract($_GET);

  if (!isset($group)) {
    $group = 'no-group';
  }

  if (!isset($paid)) {
    $paid = 'all';
  }

  if (!isset($invoiced)) {
    $invoiced = 'all';
  }

  if (!isset($start) && !isset($stop)) {
    $start  = date('Y-m');

    if (date('m') == 12) {
      $stop = (date('Y') + 1) . '-01';
    } else {
      $stop = date('Y') . '-' . sprintf("%02d",(date('m') + 1));
    }
  }

  $time = work_timesheet_get_time($group, $paid, $invoiced, $start, $stop, $version);

  switch ($version) {
    case 'admin' :
      $columns = array(
        'client' => 'Client',
        'project' => 'Project',
        'task' => 'Task',
        'developer' => 'Developer',
        'date' => 'Date',
        'hours' => 'Hours',
        'hours_billed' => 'Hours Billed',
        'amount_billed' => 'Billed',
        'amount_paid' => 'Amount Paid',
        'profit' => 'Profit',
      );
      break;

    case 'client' :
      $columns = array(
        'project' => 'Project',
        'task' => 'Task',
        'developer' => 'Developer',
        'date' => 'Date',
        'hours_billed' => 'Hours',
        'amount_billed' => 'Billed',
      );
      break;

    case 'developer' :
      $columns = array(
        'client' => 'Client',
        'project' => 'Project',
        'task' => 'Task',
        'date' => 'Date',
        'hours' => 'Hours',
        'amount_paid' => 'Amount Paid',
      );
      break;
  }
 
  $headers = array();

  foreach ($columns as $k => $v) {
    if ($k != $group) {
      $headers[] = $v;
    }
  }

  if ($group == 'no-group') {

    $rows = array();
    
    $totals = array();

    foreach ($time as $t) {

      $row = array();
      foreach ($columns as $k => $v) {
        $row[$k] = $t[$k];
      }
        
      work_timesheet_totals($row, $totals);
      $rows[] = $row;
    }

    $rows[] = array(
                array(
                  'data' => '<strong>Totals</strong>',
                  'colspan' => (count($row) - 5),
                ),
                '<strong>' . $totals['hours'] . '</strong>',
                '<strong>' . $totals['hours_billed'] . '</strong>',
                '<strong>' . $totals['amount_billed'] . '</strong>',
                '<strong>' . $totals['amount_paid'] . '</strong>',
                '<strong>' . $totals['profit'] . '</strong>',
              );

    $output .= theme('table', array('header'=> $headers, 'rows' => $rows));

  } else {
  
    $summary_table = array();

    $summary_headers = array(
      'group' => ucwords($group),
      'hours' => 'Hours',
      'hours_billed' => 'Hours Billed',
      'amount_billed' => 'Billed',
      'amount_paid' => 'Amount Paid',
      'profit' => 'Profit',
    );

    foreach ($time as $g => $time_group) {
      
      $output .= "<h2>$g</h2>";

      $rows = array();
      
      $totals = array();

      foreach ($time_group as $t) {

        $row = array();
        foreach ($columns as $k => $v) {
          if ($k != $group) {
            $row[$k] = $t[$k];
          }
        }
          
        work_timesheet_totals($row, $totals);
        $rows[] = $row;
      }

      $rows[] = array(
                  array(
                    'data' => '<strong>Totals</strong>',
                    'colspan' => (count($row) - 5),
                  ),
                  '<strong>' . $totals['hours'] . '</strong>',
                  '<strong>' . $totals['hours_billed'] . '</strong>',
                  '<strong>' . $totals['amount_billed'] . '</strong>',
                  '<strong>' . $totals['amount_paid'] . '</strong>',
                  '<strong>' . $totals['profit'] . '</strong>',
                );

      $summary_table[] = array(
                  $g,
                  '<strong>' . $totals['hours'] . '</strong>',
                  '<strong>' . $totals['hours_billed'] . '</strong>',
                  '<strong>' . $totals['amount_billed'] . '</strong>',
                  '<strong>' . $totals['amount_paid'] . '</strong>',
                  '<strong>' . $totals['profit'] . '</strong>',
                );

      $output .= theme('table', array('header'=> $headers, 'rows' => $rows));
    }
  }

  $output = str_replace('[summary]', '<h2>Summary</h2>' . theme('table', array('header'=> $summary_headers, 'rows' => $summary_table)) ,  $output); 

  return $output;
}

function work_timesheet_totals($row, &$totals) {
  foreach ($row as $k => $v) {
    if (isset($totals[$k])) {
      $totals[$k] += $v;
    } else {
      $totals[$k] = $v;
    }
  }
}

function work_timesheet_get_time($group = 'no-group', $paid = 'all', $invoiced = 'all', $start, $stop, $version = 'admin') {
  global $user;

  $result = db_query("SELECT entity_id 
                      FROM {field_data_field_date} 
                      WHERE   bundle = 'field_time' 
                              AND field_date_value >= '$start'
                              AND field_date_value <= '$stop'");

  $time = array();  

  foreach ($result as $r) {
    $entity = entity_load('field_collection_item', array($r->entity_id));
    $e = array_pop($entity); 


    if ($paid != 'all' && $e->field_paid['und'][0]['value'] != $paid) {
      continue;
    }

    if ($invoiced != 'all' && $e->field_invoice['und'][0]['value'] != $invoiced) {
      continue;
    }

    if ($version == 'client') {
      if ($e->field_hours_billed['und'][0]['value'] == 0) {
        continue;
      }
    }

    if ($version == 'developer') {
      if ($e->field_user['und'][0]['uid'] != $user->uid) {
        continue;
      }
    }


    $developer = user_load($e->field_user['und'][0]['uid']);



    $tnid = db_query("  SELECT entity_id 
                        FROM {field_data_field_time} 
                        WHERE field_time_value = :eid", 
                        array(':eid' => $r->entity_id))->fetchField();

    $pnid = db_query(" SELECT field_project_nid 
                       FROM {field_data_field_project} 
                       WHERE entity_id = :eid
                             AND bundle = 'task'", 
                       array(':eid' => $tnid))->fetchField();
    
    $cnid = db_query(" SELECT field_client_nid 
                       FROM {field_data_field_client} 
                       WHERE entity_id = :eid
                             AND bundle = 'project'", 
                       array(':eid' => $pnid))->fetchField();
    
    $t = node_load($tnid);
    $p = node_load($pnid);
    $c = node_load($cnid);

    if ($version == 'client') {
      $uids = array();

      foreach ($p->field_users['und'] as $uid) {
        $uids[] = $uid['uid'];
      }

      if (!in_array($user->uid, $uids)) {
        continue;
      }
    }

    $task    = l($t->title, 'node/' . $t->nid);
    $project = l($p->title, 'node/' . $p->nid);
    $client  = l($c->title, 'node/' . $c->nid);

    if (isset($e->field_invoice['und'])) {
      $grid_invoiced = $e->field_invoice['und'][0]['value'];
    } else {
      $grid_invoiced = 'pending';
    }
    
    if (isset($e->field_paid['und'])) {
      $grid_paid = $e->field_paid['und'][0]['value'];
    } else {
      $grid_paid = 'not-paid';
    }
    
    if (isset($e->field_hours_billed['und'])) {
      $hours_billed = $e->field_hours_billed['und'][0]['value'];
    } else {
      $hours_billed = 0;
    }

    $hours = $e->field_hours['und'][0]['value'];

    $amount_billed  = $hours_billed * $p->field_bill_rate['und'][0]['value'];

    $amount_paid = $e->field_hours['und'][0]['value'] * $developer->field_rate['und'][0]['value'];

    $profit = $amount_billed - $amount_paid;

    $item = array (
      'task'  => $task,
      'date'  => date('M d', strtotime($e->field_date['und'][0]['value'])),
      
      'paid' => $grid_paid, 
      'invoiced' => $grid_invoiced,
      
      'hours' => $hours,
      'hours_billed' => $hours_billed,

      'amount_billed' => $amount_billed,
      'amount_paid' => $amount_paid,
      'profit' => $profit,
      'actions' => ""
    );

    switch ($group) {
      case 'client':
        $item['project'] = $project; 
        $item['developer'] = $developer->name; 

        $time[$client][] = $item;
        break;
      case 'project':
        $item['client'] = $client; 
        $item['developer'] = $developer->name; 

        $time[$project][] = $item;
        break;
      case 'developer':
        $item['client'] = $client; 
        $item['project'] = $project; 

        $time[$developer->name][] = $item;
        break;
      default;
        $item['client'] = $client; 
        $item['project'] = $project; 
        $item['developer'] = $developer->name; 

        $time[] = $item;
    }
  }

  return $time;
}

function work_timesheet_aasort (&$array, $key) {
    $sorter=array();
    $ret=array();
    reset($array);
    foreach ($array as $ii => $va) {
        $sorter[$ii]=$va[$key];
    }
    asort($sorter);
    foreach ($sorter as $ii => $va) {
        $ret[$ii]=$array[$ii];
    }
    $array=$ret;
}
