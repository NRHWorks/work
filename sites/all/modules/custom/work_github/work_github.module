<?php

/**
 * Hook_menu.
 */
function work_github_menu(){
  $items['github/push'] = array(
    'title' => "Work GitHub Push Callback",
    'page callback' => 'work_github_push_callback',
    'access callback' => TRUE,
    'page arguments' => array(3),
  );

  return $items;
}


function work_github_push_callback(){
  // Get request headers.
  $headers = getallheaders();

  // If this is not a push event, simply return.
  if ($headers['X-GitHub-Event'] !== 'push') {
    echo "";
    return;
  }

  // Get json Content. It's not in $_POST.
  $content_string = file_get_contents('php://input');
  $content = json_decode($content_string);

  // Generate hashed content for comparison.
  $security_hash = hash_hmac("sha1" ,$content_string , "clBcigEcgCULOiulEIDLXBloLQDB" );

  // If these two are not the same, discard post data.
  if (strcmp(substr($headers['X-Hub-Signature'],5), $security_hash) !== 0){
    echo "";
    return;
  }

  $repository_name = $content->repository->name;


  $project_nid = db_query(
    "SELECT entity_id FROM {field_data_field_github_repository_name}
     WHERE bundle = 'project' AND field_github_repository_name_value = :rname",
     array(":rname" => $repository_name));

  // If this repository doesn't belong to any project, return.
  if ($project_nid->rowCount() === 0) {
    echo "";
    return;
  }
  $project_nid = $project_nid->fetchField();

  // Create a log entry for each commit.
  foreach ($content->commits as $commit) {
    work_log_create_log_entry($project_nid, "Git Commit ". $commit->id,
      "<strong>Timestamp:</strong> ".$commit->timestamp."<br/>".
      "<strong>Committer:</strong> ".$commit->committer->name."<br/>".
      "<strong>URL:</strong> <a href='".$commit->url."' target='_blank'>".$commit->url."</a><br/>".
      "<strong>Message:</strong> ".$commit->message);

    // Check if we should also create a log entry for story.
    // See if the beginning of the message is a number.
    $matches = array();
    preg_match("/^[\d]+/", $commit->message, $matches);
    if (count($matches) == 0 ) {
      continue;
    }

    // Check if the number is a story number which belongs to this project.
    $result = db_query("
      SELECT * FROM {field_data_field_project}
      WHERE bundle = 'story'
      AND entity_id = :tnid
      AND field_project_nid = :pnid",
      array(":tnid" => $matches[0], ":pnid" => $project_nid));
    if ($result->rowCount() == 0) {
      continue;
    }

    work_log_create_log_entry($matches[0], "Git Commit ". $commit->id,
      "<strong>Timestamp:</strong> ".$commit->timestamp."<br/>".
      "<strong>Committer:</strong> ".$commit->committer->name."<br/>".
      "<strong>URL:</strong> <a href='".$commit->url."' target='_blank'>".$commit->url."</a><br/>".
      "<strong>Message:</strong> ".$commit->message);


  }
}
