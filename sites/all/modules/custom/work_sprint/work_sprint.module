<?php

function work_sprint_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != "task_node_form") {
    return;
  }

  $sprints = array('_none' => "- NONE -");
  $sprint_nodes = db_query("
    SELECT n.nid, n.title FROM {node} AS n
    INNER JOIN {field_data_field_project} AS p
    ON n.nid = p.entity_id
    WHERE n.type = 'sprint'
    AND p.field_project_nid = :pnid",
    array(":pnid" => $form['#node']->field_project['und'][0]['nid']));

  foreach ($sprint_nodes as $s) {
    $sprints[$s->nid] = $s->title;
  }

  $form['field_sprint']['und']['#options'] = $sprints;

}
function work_sprint_menu() {

  $items['sprints/add/%'] = array(
    'title' => 'Add Sprint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('work_sprint_add_sprint', 2),
    'access callback' => TRUE,
  );
  
  return $items;
}

function work_sprint_add_sprint($form, $form_state, $project) {
  //$form['#tree'] = TRUE;
  //$form['#attributes']['enctype'] = 'multipart/form-data';

  $p = node_load($project);

  $form['title'] = array(
    '#type' => 'item',
    '#markup' => "<h3>Adding Sprint for <strong>" . l($p->title, 'node/' . $p->nid) . "</strong></h3>",
  );

  $form['project'] = array(
    '#type' => 'hidden',
    '#value' => $project,
  );


  $form['sprint'] = array(
    '#title' => 'Sprint Name',
    '#type' => 'textfield',
  );

  
  $form['start_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-3:+3',
    '#title' => 'Start Date',
  );

  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-3:+3',
    '#title' => 'End Date',
  );
 
  $form['example_entry']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function work_sprint_add_sprint_submit($form, &$form_state) {
  $v = $form_state['values'];

  global $user;

  $node = new stdClass();
  $node->title = $v['sprint'];
  $node->type = 'sprint';
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid; 
  $node->status = 1; 
  $node->promote = 0; 
  $node->comment = 0; 

  $node->field_project['und'][0]['nid'] = $v['project'];

  $start_date = $v['start_date'] == "" ? time() : strtotime($v['start_date']);
  $node->field_sprint_start_date['und'][0]['value'] = $start_date;

  $end_date = $v['end_date'] == "" ? time() + 86400 * 7 : strtotime($v['end_date']);
  $node->field_sprint_end_date['und'][0]['value'] = $end_date + 86340;

  node_save($node);

  work_log_create_log_entry($v['project'], "Sprint Added: " . l($node->title, 'node/' . $node->nid), "Sprint Added: " . l($node->title, 'node/' . $node->nid));
  drupal_set_message("Sprint Added: " . l($node->title, 'node/' . $node->nid) . "<br />" . l ('Add Another Sprint', 'sprints/add/' . $v['project']));

  drupal_goto('node/' . $node->field_project['und'][0]['nid']);
}


function work_sprint_current_sprint_of_project($project_nid) {
  $sprint = db_query("
    SELECT n.nid, n.title FROM {node} AS n
    INNER JOIN {field_data_field_project} AS p
    ON n.nid = p.entity_id
    INNER JOIN {field_data_field_sprint_end_date} AS e
    ON e.entity_id = n.nid
    WHERE p.bundle = 'sprint'
    AND p.field_project_nid = :pnid
    AND e.field_sprint_end_date_value > :now
    ORDER BY e.field_sprint_end_date_value ASC LIMIT 1",
    array(":pnid" => $project_nid, ":now" => time()));

  if ($sprint->rowCount() == 0) {
    return "No Sprint In Progress";
  }

  else {
    $sprint = $sprint->fetchObject();
    $n = node_load($sprint->nid);
    $node_content = node_view($n, 'full');
    return $node_content;
  }
}
function work_sprint_detail_by_sprint($sprint_nid) {
  $task_statuses = db_query("
    SELECT * FROM {taxonomy_term_data}
    WHERE vid = 2
    ORDER BY weight ASC");

  $tasks = db_query("
    SELECT n.title, n.nid, st.field_status_tid FROM {node} AS n
    INNER JOIN {field_data_field_status} AS st
    ON n.nid = st.entity_id
    INNER JOIN {field_data_field_sprint} AS sp
    ON n.nid = sp.entity_id
    WHERE sp.field_sprint_nid = :spnid",
    array(":spnid" => $sprint_nid))->fetchAll();

  $tasks_arrange_by_status = array();

  foreach ($tasks as $t) {
    $tasks_arrange_by_status[$t->field_status_tid][] = $t;
  }
  $table_header = array();
  $row = array();
  foreach ($task_statuses as $status) {
    $table_header[] = $status->name;
    $data = "";
    if (array_key_exists($status->tid, $tasks_arrange_by_status)) {
      foreach($tasks_arrange_by_status[$status->tid] as $task) {

	$node = node_load($task->nid);

	$assigned_user = user_load($node->field_assigned_to['und'][0]['uid']);

	$pic = '<div></div>';
	if (isset($assigned_user->picture)) {
		$pic = theme_image_style(array('style_name' => 'icon', 'path' => $assigned_user->picture->uri, 'width' => null, 'height' => null));
	
		$pic = "<div style='height: 40px; margin:0px 5px 0px 0px; float:left;'>$pic</div>";
	}

	$dots = '';
	if ($node->field_status['und'][0]['tid'] != 1 && $node->field_status['und'][0]['tid'] != 7) {
		for($x=0; $x <= ((time() - $node->changed) / (60 * 60)); $x++) {
			$dots .= ' .';
		}
	}

        $data .= "<div style='border: 1px solid #999; background-color: #FFF; margin-bottom: 10px;'>
			<div style='background-color:#999; font-size:24px; color: #EEE; padding:5px; overflow:auto; text-align:right;'> " . $pic . " #" . $task->nid . "</div>
			<div style='padding: 5px;'>
				<a href='/node/" . $task->nid . "' style='font-weight:bold; font-size: 14px;'>" . $task->title . "</a> <br />
				Assigned to: " . $assigned_user->name . "<br />
				" . $dots . "
			</div>
		  </div>";
      }
    }
    $row[] = $data;
  }
  $task_table = theme('table', array('header' => $table_header, 'rows' => array($row)));

  return $task_table;
}
